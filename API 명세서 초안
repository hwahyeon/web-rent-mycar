	API 명세서 초안:
	
	로그인 API:
	Endpoint: /login
	Method: POST
	Request:
	Body: { "username": "사용자ID", "password": "비밀번호" }
	Response:
	Success: { "token": "인증토큰" }
	Failure: { "error": "에러 메시지" }
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	회원가입 API:
	Endpoint: /register
	Method: POST
	Request:
	Body: { "username": "사용자ID", "password": "비밀번호", "name": "이름", "contact": "연락처", "email": "이메일" }
	Response:
	Success: { "message": "가입 성공" }
	Failure: { "error": "에러 메시지" }
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	차량 등록 API:
	Endpoint: /cars/register
	Method: POST
	Request:
	Body: { "model": "차종", "mileage": "주행거리", "year": "연식", "details": "특이사항" }
	Response:
	Success: { "message": "차량 등록 완료" }
	Failure: { "error": "에러 메시지" }
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	차량 정보 수정 API:
	Endpoint: /cars/{cars_id}/update
	Method: PUT
	Request:
	Body: { "model": "수정할 차종", "mileage": "수정할 주행거리", "year": "수정할 연식", "details": "수정할 특이사항" }
	Response:
	Success: { "message": "차량 정보 수정 완료" }
	Failure: { "error": "에러 메시지" }
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	차량 삭제 API:
	Endpoint: /cars/{cars_id}/delete
	Method: DELETE
	Request: 없음 (URL 파라미터로 차량 ID 전달)
	Response:
	Success: { "message": "차량 삭제 완료" }
	Failure: { "error": "에러 메시지" }
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	렌트 예약 확인 및 등록 API:
	Endpoint: /reservations
	Method: GET (예약 확인), POST (예약 등록)
	Request:
	GET Request Params: /reservations?user_id=사용자ID (사용자 예약 확인용)
	POST Body: { "car_id": "차량ID", "user_id": "사용자ID", "start_date": "대여 시작일", "end_date": "대여 종료일" }
	Response:
	Success: { "message": "예약 확인/등록 완료" }
	Failure: { "error": "에러 메시지" }
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	렌트 예약 수정 API:
	Endpoint: /reservations/{reservation_id}/update
	Method: PUT
	Request:
	Body: { "start_date": "수정된 시작일", "end_date": "수정된 종료일" }
	Response:
	Success: { "message": "예약 정보 수정 완료" }
	Failure: { "error": "에러 메시지" }
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	렌트 예약 취소 API:
	Endpoint: /reservations/{reservation_id}/cancel
	Method: DELETE
	Request: 없음 (URL 파라미터로 예약 ID 전달)
	Response:
	Success: { "message": "예약 취소 완료" }
	Failure: { "error": "에러 메시지" }
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	렌트 예약시 예상 주행거리 입력 API:
	Endpoint: /reservations/{reservation_id}/expected-mileage
	Method: PUT
	Request:
	Body: { "expected_mileage": "예상 주행거리" }
	Response:
	Success: { "message": "예상 주행거리 입력 완료" }
	Failure: { "error": "에러 메시지" }
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	렌트 반납시 실제 주행거리 입력 API:
	Endpoint: /reservations/{reservation_id}/actual-mileage
	Method: PUT
	Request:
	Body: { "actual_mileage": "실제 주행거리" }
	Response:
	Success: { "message": "실제 주행거리 입력 완료" }
	Failure: { "error": "에러 메시지" }
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	### 에러 핸들링 및 상태 코드
	
	각 API의 에러 발생 시 반환하는 상태 코드와 에러 메시지를 설명합니다.
	
	- **로그인 API (POST /login):**
	  - **Success (200 OK):** 
	    - Response: `{ "token": "인증토큰" }`
	  - **Failure (401 Unauthorized):** 
	    - Response: `{ "error": "인증 실패. 유효하지 않은 사용자 정보입니다." }`
	
	- **회원가입 API (POST /register):**
	  - **Success (201 Created):**
	    - Response: `{ "message": "가입 성공" }`
	  - **Failure (400 Bad Request):**
	    - Response: `{ "error": "회원가입 양식이 올바르지 않습니다." }`
	    
	(추가적인 에러 상황에 대한 설명을 추가할 수 있어요.)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	### 보안
	
	API 보호를 위한 보안 관련 내용을 설명합니다.
	
	- **인증 방식:**
	  - 설명: "JWT 토큰을 사용한 인증 체계를 사용합니다."
	  
	- **토큰 유효성 검사:**
	  - 설명: "모든 요청에 대해 토큰의 유효성을 검사하여 인증을 처리합니다."
	  
	(보안과 관련된 세부 내용을 추가할 수 있습니다.)
